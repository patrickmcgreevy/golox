// Code generated by "stringer -type=OpCode"; DO NOT EDIT.

package bytecode

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OpAdd-0]
	_ = x[OpAnd-1]
	_ = x[OpAssign-2]
	_ = x[OpConditionalJump-3]
	_ = x[OpConstant-4]
	_ = x[OpDeclareGlobal-5]
	_ = x[OpDivide-6]
	_ = x[OpEqualEqual-7]
	_ = x[OpGlobalLookup-8]
	_ = x[OpGreater-9]
	_ = x[OpGreaterEqual-10]
	_ = x[OpJump-11]
	_ = x[OpLess-12]
	_ = x[OpLessEqual-13]
	_ = x[OpLocalAssign-14]
	_ = x[OpLocalLookup-15]
	_ = x[OpMultiply-16]
	_ = x[OpNegate-17]
	_ = x[OpNotEqual-18]
	_ = x[OpOr-19]
	_ = x[OpPop-20]
	_ = x[OpPrint-21]
	_ = x[OpReturn-22]
	_ = x[OpSubtract-23]
}

const _OpCode_name = "OpAddOpAndOpAssignOpConditionalJumpOpConstantOpDeclareGlobalOpDivideOpEqualEqualOpGlobalLookupOpGreaterOpGreaterEqualOpJumpOpLessOpLessEqualOpLocalAssignOpLocalLookupOpMultiplyOpNegateOpNotEqualOpOrOpPopOpPrintOpReturnOpSubtract"

var _OpCode_index = [...]uint8{0, 5, 10, 18, 35, 45, 60, 68, 80, 94, 103, 117, 123, 129, 140, 153, 166, 176, 184, 194, 198, 203, 210, 218, 228}

func (i OpCode) String() string {
	if i >= OpCode(len(_OpCode_index)-1) {
		return "OpCode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OpCode_name[_OpCode_index[i]:_OpCode_index[i+1]]
}
